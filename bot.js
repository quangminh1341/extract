const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser'); 
const axios = require('axios'); 
const fetch = require('node-fetch'); 
const path = require('path');
const fs = require('fs');
require('dotenv').config();

const natural = require('natural');
const SentenceTokenizer = new natural.SentenceTokenizer();
const WordTokenizer = new natural.WordTokenizer();

const riddlesFile = path.join(__dirname, 'riddles.json');
const tarotFile = path.join(__dirname, 'tarot.json');
let tarotData = [];
function loadTarotData() {
    fs.readFile(tarotFile, 'utf8', (err, data) => {
        if (err) {
            console.error('L·ªói ƒë·ªçc file tarot.json:', err);
            if (err.code === 'ENOENT') {
                console.warn('File tarot.json kh√¥ng t√¨m th·∫•y. T·∫°o m·∫£ng tr·ªëng cho d·ªØ li·ªáu tarot.');
                tarotData = [];
            }
            return;
        }
        try {
            tarotData = JSON.parse(data);
            console.log('ƒê√£ t·∫£i d·ªØ li·ªáu Tarot th√†nh c√¥ng.');
        } catch (parseErr) {
            console.error('L·ªói ph√¢n t√≠ch JSON tarot.json:', parseErr);
        }
    });
}
loadTarotData();
// API Ping
app.get('/ping', (req, res) => {
    res.send('pong');
});

// API T√≥m t·∫Øt vƒÉn b·∫£n (Ph·∫ßn n√†y l√† tr·ªçng t√¢m)
app.post('/summarize', async (req, res) => {
    const { text, reduction_percentage } = req.body;

    if (!text) {
        return res.status(400).json({ error: 'VƒÉn b·∫£n c·∫ßn t√≥m t·∫Øt l√† b·∫Øt bu·ªôc.' });
    }

    let actualReductionPercentage = 40; 
    if (reduction_percentage !== undefined && typeof reduction_percentage === 'number' && reduction_percentage >= 0 && reduction_percentage < 100) {
        actualReductionPercentage = reduction_percentage;
    } else if (reduction_percentage !== undefined) { 
        return res.status(400).json({ error: 'T·ª∑ l·ªá r√∫t g·ªçn (reduction_percentage) ph·∫£i l√† m·ªôt s·ªë t·ª´ 0 ƒë·∫øn 99.' });
    }

    try {
        const summarized_text = summarizeText(text, actualReductionPercentage);
        res.json({
            original_text: text,
            summarized_text: summarized_text,
            reduction_percentage_applied: actualReductionPercentage,
        });
    } catch (error) {
        console.error("L·ªói khi t√≥m t·∫Øt vƒÉn b·∫£n t·ª´ API:", error);
        res.status(500).json({ error: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh t√≥m t·∫Øt.', details: error.message });
    }
});

// API ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá
app.get('/money', (req, res) => {
    const numberStr = req.query.number;
    if (!numberStr) {
        return res.status(400).json({ error: "Tham s·ªë 'number' b·ªã thi·∫øu. Vui l√≤ng cung c·∫•p m·ªôt s·ªë." });
    }

    try {
        const number = parseInt(numberStr, 10);
        if (isNaN(number)) {
            return res.status(400).json({ error: "ƒê·ªãnh d·∫°ng 'number' kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p m·ªôt s·ªë nguy√™n." });
        }
        const formattedNumber = number.toLocaleString('en-US'); // ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá theo chu·∫©n US
        res.json({ formatted_number: formattedNumber });
    } catch (error) {
        return res.status(500).json({ error: "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën." });
    }
});

// API l·∫•y ng·∫´u nhi√™n 1 c√¢u ƒë·ªë
app.get('/riddle', (req, res) => {
    fs.readFile(riddlesFile, 'utf8', (err, data) => {
        if (err) {
            console.error('L·ªói ƒë·ªçc file riddles.json:', err);
            // C√≥ th·ªÉ t·∫°o file r·ªóng n·∫øu kh√¥ng t·ªìn t·∫°i
            if (err.code === 'ENOENT') {
                console.warn('File riddles.json kh√¥ng t√¨m th·∫•y. Tr·∫£ v·ªÅ l·ªói.');
                return res.status(500).json({ error: 'File d·ªØ li·ªáu c√¢u ƒë·ªë kh√¥ng t√¨m th·∫•y' });
            }
            return res.status(500).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc d·ªØ li·ªáu c√¢u ƒë·ªë' });
        }
        try {
            const riddles = JSON.parse(data);
            if (!Array.isArray(riddles) || riddles.length === 0) {
                return res.status(500).json({ error: 'D·ªØ li·ªáu c√¢u ƒë·ªë kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng' });
            }
            const randomIndex = Math.floor(Math.random() * riddles.length);
            const riddle = riddles[randomIndex];
            return res.json(riddle);
        } catch (parseErr) {
            console.error('L·ªói ph√¢n t√≠ch JSON:', parseErr);
            return res.status(500).json({ error: 'D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá' });
        }
    });
});

// API 1: T√°ch id v√† money
app.post("/extract", (req, res) => {
    const text = req.body.text || "";

    const idMatch = text.match(/<@(\d+)>/);
    const id = idMatch ? idMatch[1] : "";

    const moneyMatch = text.match(/\s(\d+)/);
    const money = moneyMatch ? moneyMatch[1] : "";

    let moneyRel = "";
    if (money) {
        try {
            const parsedMoney = parseInt(money, 10);
            if (!isNaN(parsedMoney)) {
                moneyRel = parsedMoney.toLocaleString('en-US');
            }
        } catch (error) {
            console.error("L·ªói khi ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá:", error);
            moneyRel = "";
        }
    }
    res.json({ id, money, moneyRel });
});

// API 2: T√°ch t·ª´ th·ª© 2 t·ª´ vƒÉn b·∫£n c√≥ 2 t·ª´
app.post("/extract-word", (req, res) => {
    const input = req.body.text || "";

    const words = input.trim().split(/\s+/);
    const secondWord = words.length >= 2 ? words[1] : "";

    res.json({ text: secondWord });
});

// API Tarot
app.get('/api/tarot', (req, res) => {
    if (tarotData.length === 0) {
        return res.status(500).json({ error: 'D·ªØ li·ªáu Tarot ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c tr·ªëng.' });
    }
    const randomCard = tarotData[Math.floor(Math.random() * tarotData.length)];
    res.json(randomCard);
});

// API 3: T√¨m c·ª•m b·∫Øt ƒë·∫ßu b·∫±ng t·ª´ kh√≥a t·ª´ text c·ªë ƒë·ªãnh (kh√¥ng g·ª≠i t·ª´ client)
app.post("/match-words", (req, res) => {
  const word = req.body.word || "";
  let inputText = req.body.text;

  // üîí VƒÉn b·∫£n c·ªë ƒë·ªãnh ·ªü ƒë√¢y
const vietnameseStopwords = new Set([
    'l√†', 'v√†', 'c·ªßa', 'm·ªôt', 'c√≥', 'kh√¥ng', 'ƒë∆∞·ª£c', 'v·ªõi', 'trong', 'tr√™n',
    'cho', 'khi', 'm√†', 't·ª´', 's·∫Ω', 'ƒë√£', 'nh·ªØng', 'n√†y', '·∫•y', 'n√†o',
    'v·∫≠y', 'th√¨', '·ªü', 'ƒë·ªÉ', 'nh∆∞', 'v√¨', 'c≈©ng', 'l·∫°i', 'r·∫•t', 'h∆°n',
    'k√©m', 'qu√°', 'm·ªói', 't·ª´ng', 'v·ªÅ', 'qua', 'b√™n', 'd∆∞·ªõi', 'ƒë·∫øn', 'ra',
    'v√†o', 'l√™n', 'xu·ªëng', 'tr∆∞·ªõc', 'sau', 'ngo√†i', 'trong', 'h·∫øt', 'c·∫£', 'ch·ªâ',
    'do', 'nh·∫±m', 'b·∫±ng', 'theo', 'nh∆∞', 'v·ªõi', 'qua', 'm√†', 't·∫°i', 'nh∆∞'
]);
    // ‚úÖ N·∫øu text r·ªóng ho·∫∑c kh√¥ng c√≥, d√πng m·∫∑c ƒë·ªãnh
  function preprocessText(text) {
    text = text.toLowerCase();
    text = text.replace(/[^a-z0-9√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë\s.,?!]/g, '');
    text = text.replace(/\s+/g, ' ').trim();
    return text;
}

function tokenizeAndFilterWords(sentence) {
    return WordTokenizer.tokenize(sentence).filter(word => !vietnameseStopwords.has(word));
}
function calculateTfIdf(sentences) {
    const tfidf = new natural.TfIdf();
    sentences.forEach((sentence, index) => {
        tfidf.addDocument(tokenizeAndFilterWords(sentence).join(' ')); 
    });


    const wordScores = {}; 
    for (let i = 0; i < sentences.length; i++) {
        tfidf.listTerms(i).forEach(item => {
            wordScores[item.term] = (wordScores[item.term] || 0) + item.tfidf;
        });
    }
    return wordScores;
}

function calculateSentenceScores(sentences, wordTfIdfScores) {
    const sentenceScores = {};
    const totalSentences = sentences.length;

    sentences.forEach((sentence, index) => {
        let score = 0;
        const words = tokenizeAndFilterWords(sentence);
        for (const word of words) {
            score += (wordTfIdfScores[word] || 0);
        }
        let positionWeight = 1;
        if (index === 0) {
            positionWeight = 1.2;
        } else if (index === totalSentences - 1 && totalSentences > 1) {
            positionWeight = 1.1;
        } else {
        }
        
        sentenceScores[sentence] = score * positionWeight;
    });
    return sentenceScores;
}

/**
 * T√≥m t·∫Øt vƒÉn b·∫£n d·ª±a tr√™n ƒëi·ªÉm c√¢u, c√¢n nh·∫Øc tr·ªçng s·ªë TF-IDF v√† v·ªã tr√≠.
 * S·∫Ω r√∫t g·ªçn kho·∫£ng 40% vƒÉn b·∫£n (gi·ªØ l·∫°i 60%).
 * @param {string} text VƒÉn b·∫£n ƒë·∫ßu v√†o.
 * @param {number} reductionPercentage T·ª∑ l·ªá ph·∫ßn trƒÉm mu·ªën r√∫t g·ªçn (v√≠ d·ª•: 40 cho 40%).
 * @returns {string} VƒÉn b·∫£n t√≥m t·∫Øt.
 */
function summarizeText(text, reductionPercentage = 40) {
    const cleanedText = preprocessText(text);
    const sentences = SentenceTokenizer.tokenize(cleanedText);
    const targetSentencesCount = Math.ceil(sentences.length * ((100 - reductionPercentage) / 100));

    if (sentences.length <= targetSentencesCount || sentences.length === 0) {
        return text;
    }

    const wordTfIdfScores = calculateTfIdf(sentences);
    const sentenceScores = calculateSentenceScores(sentences, wordTfIdfScores);

    const sortedSentencesByScore = Object.keys(sentenceScores).sort((a, b) => {
        return sentenceScores[b] - sentenceScores[a];
    });

    const topSentences = sortedSentencesByScore.slice(0, targetSentencesCount);

    const finalSummarySentences = [];
    for (const originalSentence of sentences) {
        if (topSentences.includes(originalSentence)) {
            finalSummarySentences.push(originalSentence);
        }
    }

    return finalSummarySentences.join(' ');
}

const sampleText = `
Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi kh√≥a h·ªçc Tr√≠ tu·ªá Nh√¢n t·∫°o. Kh√≥a h·ªçc n√†y gi·ªõi thi·ªáu c√°c kh√°i ni·ªám c∆° b·∫£n v√† k·ªπ thu·∫≠t c·ªët l√µi c·ªßa AI. Ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ h·ªçc m√°y, th·ªã gi√°c m√°y t√≠nh v√† x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n. H·ªçc m√°y l√† m·ªôt lƒ©nh v·ª±c con c·ªßa AI, gi√∫p m√°y t√≠nh h·ªçc h·ªèi t·ª´ d·ªØ li·ªáu. Th·ªã gi√°c m√°y t√≠nh cho ph√©p m√°y t√≠nh nh√¨n v√† hi·ªÉu th·∫ø gi·ªõi. X·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n gi√∫p m√°y t√≠nh t∆∞∆°ng t√°c v·ªõi ng√¥n ng·ªØ con ng∆∞·ªùi. M·ª•c ti√™u c·ªßa kh√≥a h·ªçc l√† trang b·ªã cho b·∫°n ki·∫øn th·ª©c v√† k·ªπ nƒÉng ƒë·ªÉ x√¢y d·ª±ng c√°c h·ªá th·ªëng AI.
`;

const summary = summarizeText(sampleText, 40);
console.log("VƒÉn b·∫£n g·ªëc:\n", sampleText);
console.log("\n--- T√≥m t·∫Øt (r√∫t g·ªçn 40%) ---\n", summary);

const summary20 = summarizeText(sampleText, 20);
console.log("\n--- T√≥m t·∫Øt (r√∫t g·ªçn 20%) ---\n", summary20);

const shortText = "ƒê√¢y l√† m·ªôt c√¢u r·∫•t ng·∫Øn. N√≥ kh√¥ng c·∫ßn t√≥m t·∫Øt.";
const shortSummary = summarizeText(shortText, 40);
console.log("\n--- T√≥m t·∫Øt vƒÉn b·∫£n ng·∫Øn ---\n", shortSummary);

// --- 5. Kh·ªüi ƒë·ªông API Server (lu√¥n ·ªü cu·ªëi file) ---
app.listen(API_PORT, () => {
    console.log(`‚úÖ Server API ƒëang ch·∫°y tr√™n c·ªïng http://localhost:${API_PORT}`);
    console.log(`B·∫°n c√≥ th·ªÉ g·ª≠i POST request t·ªõi /summarize v·ªõi body JSON: {"text": "VƒÉn b·∫£n c·ªßa b·∫°n...", "sentences_count": 5}`);
    console.log(`Ho·∫∑c truy c·∫≠p c√°c API kh√°c nh∆∞ /ping, /money?number=12345, /riddle, /api/tarot`);
});
